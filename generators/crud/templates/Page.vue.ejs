<%_
  let collection = serviceName;
  let firstItem = isPaginated ? thejson[itemsName][0] : thejson[0];
  let title = meta && meta.main_title ? meta.main_title : serviceNameTitleCase;
  let firstField = editFields[0];
_%>
<template lang="pug">
q-page(padding)

  // List
  section(v-if="view === 'list'")
    .q-pa-md
      c-table(
        icon="<%= icon %>"
        title="<%= title %>"
        :rows="rows"
        :columns="columns"
        :loading="loading"
        @request="onRequest" @add="new<%= serviceNamePascalCase %>()" @view="view<%= serviceNamePascalCase %>")

  // Edit
  section(v-if="view === 'new'")
    q-card
      q-card-section
        .text-h6 Nuevo <%= title %>
        .text-subtitle2 Complete los datos solicitados
      q-separator

      q-card-section.flex.flex-center
        q-card(flat bordered v-bind:style="{'width': '60%'}")
          q-card-section

            q-form(@submit="onSubmit" class="q-gutter-md" color="positive")
              .q-pa-md
                .q-gutter-md.row
                  .col
                  <%_ editFields.forEach((e, index) => { -%>
                      <%_ if(relations && relations[e.field]) { -%>
                        <%_ const rel = relations[e.field] -%>
                    <%= rel.originModelSnakeCase %>-select(v-model="<%= serviceName %>.<%= rel.dependent_attr %>")

                      <%_ } else { -%>
                    q-input(v-model="<%= serviceName %>.<%= e.field %>" label="<%= e.fieldTitle %> *"<% if(index === 0) { %> autofocus<% } %>)
                      template(v-slot:hint) Ingrese el <%= e.fieldTitle %>

                      <%_ }-%>
                    <%_ }) -%>
          q-separator

          q-card-actions(align="around")
            q-btn(@click="view = 'list'" flat) Volver
            q-btn(flat color="positive" @click.prevent="onSubmit" :loading="loading") Grabar

  // Vista de visualización
  section(v-if="view === 'view'")
    q-card
      q-card-section
        .text-h6 Visualizar <%= title %>

        .q-pa-md
          .q-gutter-md.row
            .col
            <%_ listFields.forEach(e => { -%>
              .text-h6 <%= e.fieldTitle %>
              <%_ if(relations && relations[e.field]) { -%>
                <%_ const rel = relations[e.field] -%>
              p {{<%= serviceName %>.<%= e.field %>?.<%= rel.label_attr %>}}

              <%_ } else { -%>
              p {{<%= serviceName %>.<%= e.field %>}}

              <%_ }-%>
            <%_ }) -%>
      q-separator

      q-card-actions(align="around")
        q-btn(@click="view = 'list'" flat) Volver
        //q-btn(flat color="positive") Aceptar

</template>

<script>
// import { date, useQuasar } from 'quasar'
import { useQuasar } from 'quasar'
import { onMounted, ref } from 'vue'
import { api } from 'boot/axios'
<%_ for (let rn in relations) { -%>
<%_   const rel = relations[rn] -%>
import <%= rel.originModelPascalCase %>Select from '../components/<%= rel.originModelSnakeCase %>/<%= rel.originModelPascalCase %>Select.vue'
<%_ } -%>

// for date values ==> field: row => date.formatDate(row.fecha_alta, 'YYYY-MM-DD'),
// for transitive values ==> field: row => row.tipo_documento?.valor,

const columns = [
<%_ listFields.forEach(e => { -%>
  <%_ if(relations && relations[e.field]) { -%>
    <%_ const rel = relations[e.field] -%>
  {
    name: '<%= e.field %>',
    label: '<%= e.fieldTitle %>',
    align: 'left',
    field: row => row.<%= e.field %>?.<%= rel.label_attr %> ? row.<%= e.field %>.<%= rel.label_attr %> : '',
    sortable: true
  },
  <%_ } else { -%>
  {
    name: '<%= e.field %>',
    label: '<%= e.fieldTitle %>',
    align: 'left',
    field: '<%= e.field %>',
    sortable: true
  },
  <%_ }-%>
<%_ }) -%>
  {
    name: 'action',
    align: 'center',
    label: 'Acciones',
    field: 'action'
  }
]

const clear<%= serviceNamePascalCase %> = () => {
  return {
  <%_ editFields.forEach((e, index) => { -%>
    <%= e.field %>: null<% if (index !== editFields.length - 1) {%>,<%_}%>
<%_ }) -%>
  }
}

export default {
  name: '<%= serviceNamePascalCase %>Page',
<%_ if(relations) { -%>
  components: {
  <%_ for (let rn in relations) { -%>
  <%_   const rel = relations[rn] -%>
    <%= rel.originModelPascalCase %>Select
  <%_ } -%>
  },
<%_ } -%>

  setup() {
    const $q = useQuasar()

    const view = ref('list')
    const rows = ref([])
    const loading = ref(false)

    // Ref to mantain the pagination state when the c-table is removed from the dom (with v-if)
    const pagination = ref({
      sortBy: '<%= firstField.e %>',
      descending: true,
      page: 1,
      rowsPerPage: 10,
      rowsNumber: 0
    })
    const <%= serviceName %> = ref(clear<%= serviceNamePascalCase %>())

    const new<%= serviceNamePascalCase %> = () => {
      <%= serviceName %>.value = clear<%= serviceNamePascalCase %>()
      view.value = 'new'
    }

    const view<%= serviceNamePascalCase %> = async (instance) => {
      <%= serviceName %>.value = instance
      view.value = 'view'
    }

    const updatePagination = (newPagination, total) => {
      const { page, rowsPerPage, sortBy, descending } = newPagination
      pagination.value.page = page
      pagination.value.rowsPerPage = rowsPerPage
      pagination.value.sortBy = sortBy
      pagination.value.descending = descending
      pagination.value.rowsNumber = total
    }

    const onRequest = async (props) => {
      const { page, rowsPerPage, sortBy, descending } = props.pagination
      const filter = props.filter

      // Merge params in object for backend
      const paramsBackend = { page, rowsPerPage, sortBy, descending, jsondepth: 1 }

      // Init loading
      loading.value = true

      try {
        const response = await api.post('/search/<%= serviceName %>', { <%= firstField.field %>: filter }, { params: paramsBackend })
        // assign received rows
        rows.value = response.data.items
        // update local pagination object
        updatePagination(props.pagination, response.data.total)
      } catch (error) {
        $q.notify({
          type: 'negative',
          message: 'Ocurrió un error al obtener lista de <%= title %>'
        })
      } finally {
        // Finish loading
        loading.value = false
      }
    }

    const onSubmit = async () => {
      loading.value = true

      try {
        await api.post('/<%= serviceName %>', <%= serviceName %>.value)

        $q.notify({
          type: 'positive',
          message: 'El <%= title %> fue agregado'
        })

        // Se redirecciona a la lista
        view.value = 'list'
        onRequest({
          pagination: pagination.value,
          filter: undefined
        })
      } catch (error) {
        console.log(error)
        $q.notify({
          type: 'warning',
          message: 'Ocurrió un error al grabar el <%= title %>'
        })
      } finally {
        loading.value = false
      }
    }

    onMounted(async () => {
      onRequest({
        pagination: pagination.value,
        filter: undefined
      })
    })

    return {
      view,
      columns,
      rows,
      <%= serviceName %>,
      loading,
      pagination,
      new<%= serviceNamePascalCase %>,
      view<%= serviceNamePascalCase %>,
      onSubmit,
      onRequest
    }
  }
}
</script>
