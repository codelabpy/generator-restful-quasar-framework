<%_
  let firstField = editFields[0];
_%>
<template lang="pug">
q-page(padding)

  // List
  section(v-if="view === 'list'")
    .q-pa-md
      c-table(icon="<%= icon %>" :title="$t('<%= serviceName %>')" :rows="rows" :columns="columns" :loading="loading"
        @request="onRequest" @add="new<%= serviceNamePascalCase %>" @edit="edit<%= serviceNamePascalCase %>" @view="view<%= serviceNamePascalCase %>")

  // Edit
  section(v-if="view === 'new' || view === 'edit'")
    q-card
      q-card-section
        .text-h6 {{ view === 'edit' ? $t('general_edit') : $t('general_new') }} {{ $t('<%= serviceName %>') }}
        .text-subtitle2 {{ $t('general_complete_the_data') }}
      q-separator

      q-card-section.flex.flex-center
        q-form(@submit='onSubmit' color='positive' :style="{'width': '60%'}")
          q-card(flat bordered)
            q-card-section

              .q-gutter-md
                .q-pa-md
                  .q-gutter-md.row
                    .col
                    <%_ editFields.forEach((e, index) => { -%>
                        <%_ if(relations && relations[e.field]) { -%>
                          <%_ const rel = relations[e.field] -%>
                      <%= rel.originModelSnakeCase %>-select(v-model='<%= serviceNameCamelCase %>.<%= rel.dependent_attr %>' :label="$t('<%= serviceName %>_<%= e.field %>')"<% if(e.required) { %> required<% } %><% if(index === 0) { %> autofocus<% } %>)
                        <%_ } else { 
                            switch (e.fieldType) { 
                                case 'date': -%>
                      c-date(v-model='<%= serviceNameCamelCase %>.<%= e.field %>' :label="$t('<%= serviceName %>_<%= e.field %>')"<% if(e.required) { %> required<% } %>)
                                <%_ break
                                case 'boolean': -%>
                      q-checkbox(v-model='<%= serviceNameCamelCase %>.<%= e.field %>' :label="$t('<%= serviceName %>_<%= e.field %>')"<% if(e.required) { %> required<% } %><% if(index === 0) { %> autofocus<% } %>)
                        template(v-slot:hint) {{ $t('page_field_hint', { entity: $t('<%= serviceName %>_<%= e.field %>') }) }}
                                <%_ break
                                case 'number': -%>
                      c-input(v-model.number='<%= serviceNameCamelCase %>.<%= e.field %>' :label="$t('<%= serviceName %>_<%= e.field %>')" :hint="$t('page_field_hint', { entity: $t('<%= serviceName %>_<%= e.field %>') })" type='number'<% if(e.required) { %> required<% } %><% if(index === 0) { %> autofocus<% } %>)
                                <%_ break
                                default: -%>
                      c-input(v-model='<%= serviceNameCamelCase %>.<%= e.field %>' :label="$t('<%= serviceName %>_<%= e.field %>')" :hint="$t('page_field_hint', { entity: $t('<%= serviceName %>_<%= e.field %>') })"<% if(e.required) { %> required<% } %><% if(index === 0) { %> autofocus<% } %>)
                          <%_ }
                            }-%>

                      <%_ }) -%>
            q-separator

            q-card-actions(align='around')
              q-btn(@click='cancelEdit' flat) {{ $t('general_back') }}
              q-btn(type='submit' flat color='positive' :loading='loading') {{ $t('general_save') }}
              q-space(v-if="view === 'edit'")
              q-btn(v-if="view === 'edit'" @click.prevent="onDelete" flat color="negative" :loading="loading")  {{ $t('general_delete') }}

  // Vista de visualización
  section(v-if="view === 'view'")
    q-card
      q-card-section
        .text-h6 {{ $t('general_view') }} {{ $t('<%= serviceName %>') }}

        .q-pa-md
          .q-gutter-md.row
            .col
            <%_ listFields.forEach(e => { -%>
              .text-h6 {{ $t('<%= serviceName %>_<%= e.field %>') }}
              <%_ if(relations && relations[e.field]) { -%>
                <%_ const rel = relations[e.field] -%>
              p {{<%= serviceNameCamelCase %>.<%= e.field %>?.<%= rel.label_attr %>}}

              <%_ } else { -%>
                <%_ if (e.fieldType === 'boolean') { -%>
              p {{<%= serviceNameCamelCase %>.<%= e.field %> ? 'Si' : 'No'}}
                <%_ } else { -%>
              p {{<%= serviceNameCamelCase %>.<%= e.field %>}}
                <%_ }-%>

              <%_ }-%>
            <%_ }) -%>
      q-separator

      q-card-actions(align="around")
        q-btn(@click="view = 'list'" flat) {{ $t('general_back') }}
        //q-btn(flat color="positive") $t('general_accept')

</template>

<script>
import { useQuasar<% if(listFields.filter(e => e.fieldType === 'date').length > 0) {%>, date<% } %> } from 'quasar'
import { onMounted, ref, computed } from 'vue'
import { api } from 'boot/axios'
import { i18n } from 'boot/i18n.js'
<%_ var importedComponents = [] -%>
<%_ for (let rn in relations) { -%>
<%_   const rel = relations[rn] -%>
 <%_ if(!importedComponents.includes(rel.originModelPascalCase)) { -%>
import <%= rel.originModelPascalCase %>Select from '../components/<%= rel.originModelSnakeCase %>/<%= rel.originModelPascalCase %>Select.vue'
    <%_ importedComponents.push(rel.originModelPascalCase) -%>
  <%_ } -%>
<%_ } -%>

const $t = i18n.global.t

const clear<%= serviceNamePascalCase %> = () => {
  return {
  <%_ editFields.forEach((e, index) => { -%>
    <%= e.field %>: null<% if (index !== editFields.length - 1) {%>,<%_}%>
<%_ }) -%>
  }
}

let instanceRef = null
let previousValues = {}

export default {
  name: '<%= serviceNamePascalCase %>Page',
<%_ if(relations) { -%>
  components: {
  <%_ importedComponents.forEach( (component, index) => { -%>
    <%= component %>Select<% if (index !== importedComponents.length - 1) {%>,<%_}%>
  <%_ }) -%>
  },
<%_ } -%>

  setup() {
    const $q = useQuasar()

    const view = ref('list')
    const rows = ref([])
    const loading = ref(false)

    // Ref to mantain the pagination state when the c-table is removed from the dom (with v-if)
    const pagination = ref({
      sortBy: '<%= firstField.e %>',
      descending: true,
      page: 1,
      rowsPerPage: 10,
      rowsNumber: 0
    })
    const <%= serviceNameCamelCase %> = ref(clear<%= serviceNamePascalCase %>())

    // for date values ==> field: row => date.formatDate(row.fecha_alta, 'YYYY-MM-DD'),
    // for transitive values ==> field: row => row.tipo_documento?.valor,

    const columns = computed(() => [
    <%_ listFields.forEach(e => { -%>
      <%_ if(relations && relations[e.field]) { -%>
        <%_ const rel = relations[e.field] -%>
      {
        name: '<%= e.field %>',
        label: $t('<%= serviceName %>_<%= e.field %>'),
        align: 'left',
        field: row => row.<%= e.field %>?.<%= rel.label_attr %> ? row.<%= e.field %>.<%= rel.label_attr %> : '',
        sortable: true
      },
      <%_ } else { -%>
      {
        name: '<%= e.field %>',
        label: $t('<%= serviceName %>_<%= e.field %>'),
        align: 'left',
    <%_ if (e.fieldType === 'date') { -%>
        field: row => row.<%= e.field %> ? date.formatDate(row.date, 'YYYY-MM-DD') : '',
        type: '<%= e.fieldType %>',
    <%_ } else if (e.fieldType) { -%>
        field: '<%= e.field %>',
        type: '<%= e.fieldType %>',
    <%_ } -%>
        sortable: true
      },
      <%_ }-%>
    <%_ }) -%>
      {
        name: 'action',
        align: 'center',
        label: $t('general_actions'),
        field: 'action'
      }
    ])

    const new<%= serviceNamePascalCase %> = () => {
      <%= serviceNameCamelCase %>.value = clear<%= serviceNamePascalCase %>()
      view.value = 'new'
    }

    const edit<%= serviceNamePascalCase %> = async (instance) => {
      instanceRef = instance
      previousValues = { ...instance }
  <%_ for (let rn in relations) { -%>
  <%_   const rel = relations[rn] -%>
      instance.<%= rel.dependent_attr %> = instance.<%= rn %>?.<%= rel.origin_attr %>
  <%_ } -%>
      <%= serviceNameCamelCase %>.value = instance
      view.value = 'edit'
    }

    const view<%= serviceNamePascalCase %> = async (instance) => {
      <%= serviceNameCamelCase %>.value = instance
      view.value = 'view'
    }

    const cancelEdit = _ => {
      if (instanceRef) {
        Object.assign(instanceRef, previousValues)
      }
      view.value = 'list'
    }

    const updatePagination = (newPagination, total) => {
      const { page, rowsPerPage, sortBy, descending } = newPagination
      pagination.value.page = page
      pagination.value.rowsPerPage = rowsPerPage
      pagination.value.sortBy = sortBy
      pagination.value.descending = descending
      pagination.value.rowsNumber = total
    }

    const onRequest = async (props) => {
      const { page, rowsPerPage, sortBy, descending } = props.pagination
      const filter = props.filter

      // Merge params in object for backend
      const paramsBackend = { page, rowsPerPage, sortBy, descending, jsondepth: 1 }

      // Init loading
      loading.value = true

      try {
        const response = await api.post('/search/<%= serviceName %>', { <%= firstField.field %>: filter }, { params: paramsBackend })
        // assign received rows
        rows.value = response.data.items
        // update local pagination object
        updatePagination(props.pagination, response.data.total)
      } catch (error) {
        $q.notify({
          type: 'negative',
          message: 'Ocurrió un error al obtener lista de <%= title %>'
        })
      } finally {
        // Finish loading
        loading.value = false
      }
    }

    const goToList = _ => {
      // Se redirecciona a la lista
      view.value = 'list'
      onRequest({
        pagination: pagination.value,
        filter: undefined
      })
    }

    const onSubmit = async () => {
      loading.value = true
      try {
        let message
    <%_ for (let e of fields.filter(e => e.fieldType && e.fieldType === 'date')) { -%>
        <%= serviceNameCamelCase %>.value.<%= e.field %> = date.formatDate(<%= serviceNameCamelCase %>.value.<%= e.field %>, 'YYYY-MM-DDTHH:MM:S')
    <%_ } -%>
        if (view.value === 'new') {
          await api.post('/<%= serviceName %>', <%= serviceNameCamelCase %>.value)
          message = $t('page_added_correctly_message', { entity: $t('<%= serviceName %>') })
        } else {
          await api.put(`/<%= serviceName %>/${<%= serviceNameCamelCase %>.value.id}`, <%= serviceNameCamelCase %>.value)
          message = $t('page_edited_correctly_message', { entity: $t('<%= serviceName %>') })
        }
        $q.notify({ type: 'positive', message })
        goToList()
      } catch (error) {
        console.log(error)
        $q.notify({
          type: 'warning',
          message: $t('page_save_error_message', { entity: $t('<%= serviceName %>') })
        })
      } finally {
        loading.value = false
      }
    }

    const onDelete = async () => {
      $q.dialog({
        title: $t('page_delete_dialog_title'),
        message: $t('page_delete_dialog_message', { entity: $t('<%= serviceName %>') }),
        cancel: true,
        persistent: true
      }).onOk(async _ => {
        loading.value = true
        try {
          await api.delete(`/<%= serviceName %>/${<%= serviceNameCamelCase %>.value.id}`)
          $q.notify({ type: 'positive', message: $t('page_delete_notify_message', { entity: $t('<%= serviceName %>') }) })
          goToList()
        } catch (error) {
          console.log(error)
          $q.notify({
            type: 'warning',
            message: $t('page_delete_notify_error_message', { entity: $t('<%= serviceName %>') })
          })
        } finally {
          loading.value = false
        }
      })
    }

    onMounted(async () => {
      onRequest({
        pagination: pagination.value,
        filter: undefined
      })
    })

    return {
      view,
      columns,
      rows,
      <%= serviceNameCamelCase %>,
      loading,
      pagination,
      new<%= serviceNamePascalCase %>,
      edit<%= serviceNamePascalCase %>,
      view<%= serviceNamePascalCase %>,
      cancelEdit,
      onSubmit,
      onRequest,
      onDelete
    }
  }
}
</script>
