<%_
  let collection = serviceName;
  let firstItem = isPaginated ? thejson[itemsName][0] : thejson[0];
  let title = meta && meta.main_title ? meta.main_title : serviceNameTitleCase;
  let edit_columns = meta && meta.edit_columns ? meta.edit_columns : 2;
  let firstField = editFields[0];
_%>
<template lang="pug">
q-page(padding)

  // List
  section(v-if="view === 'list'")
    .q-pa-md
      q-table(
        title="<%= serviceNameTitleCase %>"
        :rows="rows"
        :columns="columns"
        @request="onRequest"
        row-key="name"
        no-data-label="No hay datos"
        no-results-label="El filtro no encontr贸 resultados"
        :loading="loading"
        :loading-label="'Cargando...'"
        v-model:pagination="pagination"
        :filter="filter"
      )
        template(v-slot:top-right)
          .col-9
            q-input(borderless dense debounce="300" v-model="filter" placeholder="Buscar" filled color="positive" )
              template(v-slot:append)
                q-icon(name="search")
          .row.col-3
            q-btn(@click="new<%= serviceNamePascalCase %>()" color="positive" icon="add" round flat)
              q-tooltip Nuevo
        template(v-slot:body="props")
          q-tr(:props="props")
            q-td(v-for="col in props.cols" :key="col.name" :props="props")
              template(v-if="col.name === 'action'")
                q-btn(@click="view<%= serviceNamePascalCase %>(props.row)" color="positive" icon="remove_red_eye" round flat dense)
                  q-tooltip Visualizar
              template(v-else) {{ col.value }}
        template(v-slot:no-data="{ icon, message, filter }")
          .full-width.row.flex-center.q-gutter-sm
            span {{ message }}
            q-icon(size="2em" :name="filter ? 'filter_b_and_w' : icon")

  // Edit
  section(v-if="view === 'new'")
    q-card.avalon-card-page
      q-card-section
        .text-h6 Nuevo <%= serviceNameTitleCase %>
        .text-subtitle2 Complete los datos solicitados
      q-separator

      q-card-section.flex.flex-center
        q-card(flat bordered v-bind:style="{'width': '60%'}")
          q-card-section
            q-form(@submit="onSubmit" ref="prospectForm" class="q-gutter-md" color="positive")

              .row
                .col-4.q-pa-md
                  <%_ editFields.forEach(function(e, index) { -%>
                  // <%= e.field %>
                  q-input(v-model="<%= serviceName %>.<%= e.field %>" label="<%= e.fieldTitle %> *" color="positive"
                    lazy-rules class="q-mb-md")
                    template(v-slot:hint) Ingrese el e
                  <%_ }) -%>

          q-separator

          q-card-actions(align="around")
            q-btn(@click="view = 'list'" flat) Volver
            q-btn(flat color="positive" @click.prevent="onSubmit" :loading="loading") Grabar

  // Vista de visualizaci贸n
  section(v-if="view === 'view'")
    q-card.avalon-card-page
      q-card-section
        .text-h6 Visualizar <%= serviceNameTitleCase %>
        //.text-subtitle2 Complete los datos solicitados
      q-separator

      // ProspectoView(:prospecto="prospecto")
      // q-separator

      q-card-actions(align="around")
        q-btn(@click="view = 'list'" flat) Volver
        //q-btn(flat color="positive") Aceptar

</template>

<script>
// import { date, useQuasar } from 'quasar'
import { useQuasar } from 'quasar'
import { onMounted, ref } from 'vue'
import { api } from 'boot/axios'

// for date values ==> field: row => date.formatDate(row.fecha_alta, 'YYYY-MM-DD'),
// for transitive values ==> field: row => row.tipo_documento?.valor,

const columns = [
<%_ editFields.forEach(function(e, index) { -%>
  {
    name: '<%= e.field %>',
    label: '<%= e.fieldTitle %>',
    align: 'left',
    field: '<%= e.field %>',
    sortable: true
  },
<%_ }) -%>
  {
    name: 'action',
    align: 'center',
    label: 'Acciones',
    field: 'action'
  }
]

const clear<%= serviceNamePascalCase %> = () => {
  return {
<%_ editFields.forEach(function(e, index) { -%>
    <%= e.field %>: null<% if (index !== editFields.length - 1) {%>,<%_}%>
<%_ }) -%>
  }
}

export default {
  name: '<%= serviceNamePascalCase %>Page',

  setup() {
    const $q = useQuasar()

    const view = ref('list')
    const rows = ref([])
    const filter = ref('')
    const loading = ref(false)
    const pagination = ref({
      sortBy: 'fecha_alta',
      descending: true,
      page: 1,
      rowsPerPage: 10,
      rowsNumber: 0 // xx if getting data from a server
    })
    const <%= serviceName %> = ref(clear<%= serviceNamePascalCase %>())

    const onRequest = (props) => {
      const { page, rowsPerPage, sortBy, descending } = props.pagination
      const filter = props.filter

      // Init loading
      loading.value = true

      // Merge params in object for backend
      const paramsBackend = { page, rowsPerPage, sortBy, descending, jsondepth: 1 }

      api.post('/search/<%= serviceName %>', { <%= firstField.field %>: filter }, { params: paramsBackend })
        .then(response => {
          rows.value = response.data.items
          // Se configura paginacion
          pagination.value.page = page
          pagination.value.rowsPerPage = rowsPerPage
          pagination.value.sortBy = sortBy
          pagination.value.descending = descending
          pagination.value.rowsNumber = response.data.total
          // console.log(response.data)
        })
        .catch(() => {
          $q.notify({
            color: 'red-5',
            textColor: 'white',
            icon: 'warning',
            message: 'Ocurri贸 un error al obtener lista de <%= serviceNameTitleCase %>'
          })
        })
        // eslint-disable-next-line no-return-assign
        .finally(() =>
          // Finish loading
          loading.value = false
        )
    }

    const new<%= serviceNamePascalCase %> = () => {
      <%= serviceName %>.value = clear<%= serviceNamePascalCase %>()
      view.value = 'new'
    }

    const view<%= serviceNamePascalCase %> = async (instance) => {
      <%= serviceName %>.value = instance
      view.value = 'view'
    }

    const onSubmit = () => {
      loading.value = true

      // TODO: sincronizar con respuesta del backend
      api.post('/<%= serviceName %>', <%= serviceName %>.value)
        .then(response => {
          console.log(response.data)
          $q.notify({
            color: 'green-4',
            textColor: 'white',
            icon: 'cloud_done',
            message: 'El <%= serviceNameTitleCase %> fue agregado'
          })
          // Se redirecciona a la lista de prospectos
          view.value = 'list'
          onRequest({
            pagination: pagination.value,
            filter: undefined
          })
        })
        .catch(() => {
          $q.notify({
            color: 'red-5',
            textColor: 'white',
            icon: 'warning',
            message: 'Ocurri贸 un error al grabar el <%= serviceNameTitleCase %>'
          })
        })
        // eslint-disable-next-line no-return-assign
        .finally(() =>
          loading.value = false
        )
    }

    onMounted(async () => {
      onRequest({
        pagination: pagination.value,
        filter: undefined
      })
    })

    return {
      view,
      columns,
      rows,
      filter,
      <%= serviceName %>,
      loading,
      pagination,
      new<%= serviceNamePascalCase %>,
      view<%= serviceNamePascalCase %>,
      onSubmit,
      onRequest
    }
  }
}
</script>
